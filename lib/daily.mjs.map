{
  "version": 3,
  "sources": ["../src/daily.ts"],
  "sourcesContent": ["#!/usr/bin/env /usr/local/bin/node\n\nimport { FileHandle, open, writeFile } from \"node:fs/promises\";\nimport { parseArgs, ParseArgsConfig } from \"node:util\";\nimport path from \"path\";\nimport { format, subDays, differenceInDays } from \"date-fns\";\n\nconst __filename = process.cwd();\nconst now = new Date();\n\nconst doneRegex = /^.+(\u2714|- \\[x\\]).+\\n/gmu;\n\nfunction fmtDate(d: Date) {\n\treturn format(d, \"yyyy-MM-dd\");\n}\nconst helpDocs = `\nCopies todo items from previous daily file to today's new file.\n\nUsage: daily [options]\n\n\t-d --dir\t\t\t\tDirectory for your daily files (default is '../').\n\t-o --overwrite  Should it overwrite the today file if it already exists?\n\t-e --ext\t\t\t\tFile extension (default is '.taskpaper').\n\t-n --days\t\t\t\tDays back to search for previous daily file (default 100).\n\t-h --help\t\t\t\tPrints this help.\n`\nconst args: ParseArgsConfig = {\n\toptions: {\n\t\tdir: {\n\t\t\ttype: \"string\",\n\t\t\tshort: \"d\",\n\t\t\tdefault: \"../\"\n\t\t},\n\t\toverwrite: {\n\t\t\ttype: \"boolean\",\n\t\t\tshort: \"o\",\n\t\t\tdefault: false\n\t\t},\n\t\textension: {\n\t\t\ttype: \"string\",\n\t\t\tshort: \"e\",\n\t\tdefault: \".taskpaper\"\n\t\t},\n\t\tdays: {\n\t\t\ttype: \"string\",\n\t\t\tshort: \"n\",\n\t\t\tdefault: \"100\"\n\t\t},\n\t\thelp: {\n\t\t\ttype: \"boolean\",\n\t\t\tshort: \"h\",\n\t\t\tdefault: false\n\t\t},\n\t},\n};\nconst {\n\tvalues: { dir, overwrite, extension, help, days },\n} = parseArgs(args);\nlet n = 100;\nif (typeof days === \"string\") {\n\tn = Number.parseInt(days);\n}\nconst directory = dir || \"../\";\nconst fileExtension = extension || \".taskpaper\";\n\n/**\n * Copies contents from given file, cleans the text, and writes to file with\n * todays date in the filename.\n * @param  {FileHandle} file [the existing file to read from]\n * @return {Promise}      Resolves when new file is written\n */\nasync function copyToNewFile(file: FileHandle): Promise<any> {\n\tconst { buffer } = await file.read();\n\tconsole.log(\"Copied previous file...\");\n\tconst contents = buffer.toString();\n\tconsole.log(contents.length);\n\tlet newContents = contents.replace(doneRegex, \"\");\n\tconst journalIndex = newContents.indexOf(\"# JOURNAL\");\n\tif (journalIndex > 0) {\n\t\tnewContents = newContents.substring(0, journalIndex + 9);\n\t\tnewContents = `${newContents}\\r\\n#######################################`;\n\t}\n\tconsole.log(newContents.length);\n\tconst todayFile = path.resolve(\n\t\t__filename,\n\t\t`${directory}${fmtDate(now)}${fileExtension}`,\n\t);\n\tif (!overwrite) {\n\t\tlet existingFile\n\t\ttry {\n\t\t\texistingFile = await open(todayFile);\n\t\t} catch {\n\t\t\t//continue\n\t\t}\n\t\tif (existingFile) {\n\t\t\tthrow new Error(\"File exists, and overwrite option was not set.\");\n\t\t}\n\t}\n\tconsole.log(\"Writing new file:\", todayFile);\n\treturn writeFile(todayFile, newContents);\n}\n\n/**\n * Attempts to open the daily file from yesterday and recursively looks\n * back 1 day at a time until it finds a file.\n * @return {[Promise]} [Resolves when it finds and writes a file or rejects\n * if no file is found for the last 'n' days.]\n */\nasync function openLastFile() {\n\t/**\n\t * Recursive function that gets date - x days and attempts to open it\n\t * @param  {Date} date        \t\tThe date to start with\n\t * @param  {Number} subtraction \tNumber of days to subtract from date, defaults to 1\n\t * @return {Promise}     \t\t\t\t\tA promise that resolves when find and copy\n\t * succeeds or rejects when no file can be found\n\t */\n\tasync function getPreviousPath(\n\t\tdate: Date,\n\t\tsubtraction: number = 1,\n\t): Promise<void> {\n\t\tconst newDate = subDays(date, subtraction);\n\n\t\tconst filePath = path.resolve(\n\t\t\t__filename,\n\t\t\t`${directory}${fmtDate(newDate)}${fileExtension}`,\n\t\t);\n\t\tconsole.log(\"Looking for most recent file...\");\n\t\ttry {\n\t\t\tconst file = await open(filePath);\n\t\t\tconsole.log(\"Found file and opening:\", filePath);\n\t\t\treturn copyToNewFile(file);\n\t\t} catch (reason) {\n\t\t\tconsole.log(\"Unable to open file: \", filePath);\n\t\t\tif (differenceInDays(now, newDate) > n) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t`Looked back ${n} days without finding a daily ${fileExtension} file in ${directory}, giving up.`,\n\t\t\t\t);\n\t\t\t}\n\t\t\treturn getPreviousPath(newDate);\n\t\t}\n\t}\n\n\treturn getPreviousPath(now);\n}\nif (help) {\n\tconsole.log(helpDocs)\n} else {\n\topenLastFile()\n\t\t.catch((error) => {\n\t\t\tconsole.error(error);\n\t\t\tprocess.exit(1);\n\t\t})\n\t\t.then(() => {\n\t\t\tconsole.log(\"Finished\");\n\t\t\tprocess.exit(0);\n\t\t});\n}\n"],
  "mappings": "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",
  "names": []
}
